[native_firebase]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = firebase

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = firebase

macro_judgement  =

android_headers = -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a/include -arch i386 -DTARGET_OS_IPHONE -I%(sysroot)s/usr/include -x c++
android_flags = -D_SIZE_T_DEFINED_

clang_headers = -idirafter %(clangllvmdir)s/%(clang_include)s
clang_flags = -nostdinc -x c++ -std=c++17 -fsigned-char -mfloat-abi=soft -U__SSE__

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/external/sources

cocos_flags = -DANDROID -DCC_PLATFORM=3 -DCC_PLATFORM_MAC_IOS=1 -DCC_PLATFORM_MAC_OSX=4 -DCC_PLATFORM_WINDOWS=2 -DCC_PLATFORM_ANDROID=3


cxxgenerator_headers = -I%(package_path)s/jsb-helper

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
headers = %(package_path)s/native-firebase/includes/firebase_app.h
replace_headers = firebase_app.h::includes/firebase_app.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = FirebaseApp

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.
skip = FirebaseApp::[getApp]

rename_functions = 

rename_classes =

# for all class names, should we remove something when registering in the target VM?
remove_prefix = 

# classes for which there will be no "parent" lookup
classes_have_no_parents = FirebaseApp

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = Clonable

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes =